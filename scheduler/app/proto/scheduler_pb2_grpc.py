# flake8: noqa
# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import proto.scheduler_pb2 as scheduler__pb2


class NotificationsSchedulerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListNotifications = channel.unary_unary(
            "/NotificationsScheduler.NotificationsScheduler/ListNotifications",
            request_serializer=scheduler__pb2.Empty.SerializeToString,
            response_deserializer=scheduler__pb2.NotificationsList.FromString,
        )
        self.AddJob = channel.unary_unary(
            "/NotificationsScheduler.NotificationsScheduler/AddJob",
            request_serializer=scheduler__pb2.AddJobRequest.SerializeToString,
            response_deserializer=scheduler__pb2.Job.FromString,
        )
        self.GetJob = channel.unary_unary(
            "/NotificationsScheduler.NotificationsScheduler/GetJob",
            request_serializer=scheduler__pb2.GetJobRequest.SerializeToString,
            response_deserializer=scheduler__pb2.Job.FromString,
        )
        self.ListJobs = channel.unary_unary(
            "/NotificationsScheduler.NotificationsScheduler/ListJobs",
            request_serializer=scheduler__pb2.Empty.SerializeToString,
            response_deserializer=scheduler__pb2.JobList.FromString,
        )
        self.RescheduleJob = channel.unary_unary(
            "/NotificationsScheduler.NotificationsScheduler/RescheduleJob",
            request_serializer=scheduler__pb2.RescheduleJobRequest.SerializeToString,
            response_deserializer=scheduler__pb2.Job.FromString,
        )
        self.PauseJob = channel.unary_unary(
            "/NotificationsScheduler.NotificationsScheduler/PauseJob",
            request_serializer=scheduler__pb2.PauseJobRequest.SerializeToString,
            response_deserializer=scheduler__pb2.Empty.FromString,
        )
        self.ResumeJob = channel.unary_unary(
            "/NotificationsScheduler.NotificationsScheduler/ResumeJob",
            request_serializer=scheduler__pb2.ResumeJobRequest.SerializeToString,
            response_deserializer=scheduler__pb2.Empty.FromString,
        )


class NotificationsSchedulerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ListNotifications(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def AddJob(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetJob(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ListJobs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def RescheduleJob(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def PauseJob(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ResumeJob(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_NotificationsSchedulerServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "ListNotifications": grpc.unary_unary_rpc_method_handler(
            servicer.ListNotifications,
            request_deserializer=scheduler__pb2.Empty.FromString,
            response_serializer=scheduler__pb2.NotificationsList.SerializeToString,
        ),
        "AddJob": grpc.unary_unary_rpc_method_handler(
            servicer.AddJob,
            request_deserializer=scheduler__pb2.AddJobRequest.FromString,
            response_serializer=scheduler__pb2.Job.SerializeToString,
        ),
        "GetJob": grpc.unary_unary_rpc_method_handler(
            servicer.GetJob,
            request_deserializer=scheduler__pb2.GetJobRequest.FromString,
            response_serializer=scheduler__pb2.Job.SerializeToString,
        ),
        "ListJobs": grpc.unary_unary_rpc_method_handler(
            servicer.ListJobs,
            request_deserializer=scheduler__pb2.Empty.FromString,
            response_serializer=scheduler__pb2.JobList.SerializeToString,
        ),
        "RescheduleJob": grpc.unary_unary_rpc_method_handler(
            servicer.RescheduleJob,
            request_deserializer=scheduler__pb2.RescheduleJobRequest.FromString,
            response_serializer=scheduler__pb2.Job.SerializeToString,
        ),
        "PauseJob": grpc.unary_unary_rpc_method_handler(
            servicer.PauseJob,
            request_deserializer=scheduler__pb2.PauseJobRequest.FromString,
            response_serializer=scheduler__pb2.Empty.SerializeToString,
        ),
        "ResumeJob": grpc.unary_unary_rpc_method_handler(
            servicer.ResumeJob,
            request_deserializer=scheduler__pb2.ResumeJobRequest.FromString,
            response_serializer=scheduler__pb2.Empty.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "NotificationsScheduler.NotificationsScheduler", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class NotificationsScheduler(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ListNotifications(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/NotificationsScheduler.NotificationsScheduler/ListNotifications",
            scheduler__pb2.Empty.SerializeToString,
            scheduler__pb2.NotificationsList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def AddJob(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/NotificationsScheduler.NotificationsScheduler/AddJob",
            scheduler__pb2.AddJobRequest.SerializeToString,
            scheduler__pb2.Job.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetJob(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/NotificationsScheduler.NotificationsScheduler/GetJob",
            scheduler__pb2.GetJobRequest.SerializeToString,
            scheduler__pb2.Job.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def ListJobs(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/NotificationsScheduler.NotificationsScheduler/ListJobs",
            scheduler__pb2.Empty.SerializeToString,
            scheduler__pb2.JobList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def RescheduleJob(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/NotificationsScheduler.NotificationsScheduler/RescheduleJob",
            scheduler__pb2.RescheduleJobRequest.SerializeToString,
            scheduler__pb2.Job.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def PauseJob(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/NotificationsScheduler.NotificationsScheduler/PauseJob",
            scheduler__pb2.PauseJobRequest.SerializeToString,
            scheduler__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def ResumeJob(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/NotificationsScheduler.NotificationsScheduler/ResumeJob",
            scheduler__pb2.ResumeJobRequest.SerializeToString,
            scheduler__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
